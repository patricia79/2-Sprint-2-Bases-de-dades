// 1- Escriu una consulta per mostrar tots els documents en la col·lecció Restaurants
db.restaurants.find()
// 2- Escriu una consulta per mostrar el restaurant_id, name, borough i cuisine per tots els documents en la col·lecció Restaurants
// 3- Escriu una consulta per mostrar el restaurant_id, name, borough i cuisine, però excloure el camp _id per tots els documents en la col·lecció Restaurants
db.restaurants.find({},{"restaurant_id":1, "name":1, "borough":1, "cuisine":1,"_id":0})
// 4- Escriu una consulta per mostrar restaurant_id, name, borough i zip code, però excloure el camp _id per tots els documents en la col·lecció Restaurants
db.restaurants.find({},{"restaurant_id":1, "name":1, "borough":1, "address.zipcode":1,"_id":0})
// 5- Escriu una consulta per mostrar tot els restaurants que estan en el Bronx
db.restaurants.find({"borough":"Bronx"})
// 6- Escriu una consulta per mostrar els primers 5 restaurants que estan en el Bronx
db.restaurants.find({"borough":"Bronx"}).limit(5)
// 7- Escriu una consulta per mostrar el pròxim 5 restaurants després de saltar els primers 5 del Bronx
db.restaurants.find({"borough":"Bronx"}).skip(5).limit(5)
// 8- Escriu una consulta per trobar els restaurants que tenen un score de més de 90
db.restaurants.find({"grades.score":{$gt:90}})
// 9- Escriu una consulta per trobar els restaurants que tenen un score de més que 80 però menys que 100
db.restaurants.find({"grades.score":{$gt:80 , $lt:100}})
// 10- Escriu una consulta per trobar els restaurants quins localitzen en valor de latitud menys que -95.754168
db.restaurants.find({"address.coord.0":{$lt:-95.754168}})
// 11- Escriu una consulta de MongoDB per a trobar els restaurants que no preparen cap cuisine de 'American' i el seu puntaje de 
//qualificació superior a 70 i latitud inferior a -65.754168
db.restaurants.find({cuisine:{$ne:"American "},"grades.score":{$gt:70},"address.coord.0":{$lt:-65.754168}})
// 12- Escriu una consulta per trobar els restaurants quins no preparen cap cuisine de 'American' i va aconseguir un marcador 
//més que 70 i localitzat en la longitud menys que -65.754168. Nota : Fes aquesta consulta sense utilitzar $and operador
db.restaurants.find({cuisine:{$ne:"American "},"grades.score":{$gt:70},"address.coord.0":{$lt:-65.754168}})
// 13- Escriu una consulta per trobar els restaurants quins no preparen cap cuisine de 'American ' i va aconseguir un punt de grau
//'A' no pertany a Brooklyn. S'ha de mostrar el document segons la cuisine en ordre descendent
db.restaurants.find({cuisine:{$ne:"American "},"grades.grade":"A",borough:{$ne:"Brooklyn"}}).sort({cuisine:-1})
// 14- Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants quin contenir 'Wil'
//  com les tres primeres lletres en el seu nom
db.restaurants.find({name:/^Wil/},{restaurant_id:1,name:1,borough:1,cuisine:1,_id:0})
// 15- Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants quin contenir 'ces' 
// com les últim tres lletres en el seu nom
db.restaurants.find({name:/ces$/},{restaurant_id:1,name:1,borough:1,cuisine:1,_id:0})
// 16- Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants quin contenir 
// 'Reg' com tres lletres en algun lloc en el seu nom
db.restaurants.find({name:/Reg/},{restaurant_id:1,name:1,borough:1,cuisine:1,_id:0})
// 17- Escriu una consulta per trobar els restaurants quins pertanyen al Bronx i va preparar qualsevol plat American o xinès
db.restaurants.find({borough:"Bronx", $or:[{cuisine:"American "},{cuisine:"Chinese"}]})
// 18- Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que pertanyen a Staten 
// Island o Queens o Bronxor Brooklyn
db.restaurants.find({$or:[{borough:"Queens"},{borough:"Staten Island"},{borough:"Brooklyn"}]},{restaurant_id:1,name:1,borough:1,cuisine:1,_id:0})
// 19- Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que no pertanyen a Staten Island o
//  Queens o Bronx or Brooklyn
db.restaurants.find({$nor:[{borough:"Queens"},{borough:"Staten Island"},{borough:"Brooklyn"},{borough:"Bronx"}]},{restaurant_id:1,name:1,borough:1,cuisine:1,_id:0})
// 20- Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que aconsegueixin un marcador quin no és
//  més que 10
db.restaurants.find({"grades.score":{$lte:10}},{restaurant_id:1,name:1,borough:1,cuisine:1,_id:0})
// 21- Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que preparen peix excepte 'American ' i 'Chinese' 
// o el name del restaurant comença amb lletres 'Wil'

/* crec que aquesta consulta esta malament, no hiha manera de saber en quin restaurant es prepara peix i en qual no */

// 22- Escriu una consulta per trobar el restaurant_id, name, i grades per a aquells restaurants que aconsegueixin un grau "A" i
//  un score 11 en dades d'estudi ISODate "2014-08-11T00:00:00Z"
db.restaurants.find({"grades.score":11,"grades.grade":"A","grades.date":ISODate("2014-08-11T00:00:00Z")},
                    {restaurant_id:1,name:1,grades:1,_id:0})
// 23- Escriu una consulta per trobar el restaurant_id, name i grades per a aquells restaurants on el 2n element de varietat 
// de graus conté un grau de "A" i marcador 9 sobre un ISODate "2014-08-11T00:00:00Z"
db.restaurants.find({"grades.1.score":9,"grades.1.grade":"A","grades.1.date":ISODate("2014-08-11T00:00:00Z")},
                    {restaurant_id:1,name:1,grades:1,_id:0})
// 24- Escriu una consulta per trobar el restaurant_id, name, adreça i ubicació geogràfica per a aquells restaurants on
//  el segon element del array coord conté un valor quin és més que 42 i fins a 52
db.restaurants.find({"address.coord.1":{$gt:42, $lte:52}},{restaurant_id:1,name:1,address:1})
// 25- Escriu una consulta per organitzar el nom dels restaurants en ordre ascendent juntament amb totes les columnes
db.restaurants.find({}).sort({name:1})
// 26- Escriu una consulta per organitzar el nom dels restaurants en descendir juntament amb totes les columnes
db.restaurants.find({}).sort({name:-1})
// 27- Escriu una consulta a organitzar el nom de la cuisine en ordre ascendent i per el mateix barri de cuisine. 
// Ordre descendint
db.restaurants.find({}).sort({borough:1,cusine:1})
// 28- Escriu una consulta per saber tant si totes les direccions contenen el carrer o no
db.restaurants.find({"address.street":{$exists:false}})
// 29- Escriu una consulta quin seleccionarà tots el documents en la col·lecció de restaurants on el valor del camp 
// coord és Double
db.restaurants.find({"address.coord":{$type: "double"}})
// 30- Escriu una consulta quin seleccionarà el restaurant_id, name i grade per a aquells restaurants quins retorns
//  0 com a resta després de dividir el marcador per 7
db.restaurants.find({"grades.score":{$mod:[7,0]}},{restaurant_id:1,name:1,grade:1})
// 31- Escriu una consulta per trobar el name de restaurant, borough, longitud i altitud i cuisine per a aquells 
// restaurants que contenen 'mon' com tres lletres en algun lloc del seu name
db.restaurants.find({name:/mon/},{name:1,borough:1,"address.coord":1,cuisine:1})
// 32- Escriu una consulta per trobar el name de restaurant, borough, longitud i latitud i cuisine per a aquells
//  restaurants que conteinen 'Mad' com primeres tres lletres del seu name
db.restaurants.find({name:/^Mad/},{name:1,borough:1,"address.coord":1,cuisine:1})


db.restaurants.find();
db.restaurants.find( {}, {restaurant_id:1,name:1,address:1,borough:1,cuisine:1} );
db.restaurants.find({},{"restaurant_id":1, "name":1, "borough":1, "cuisine":1})
db.restaurant.find( {}, {restaurant_id:1,name:1, borough:1, cuisine:1} )


db.restaurants.find( {}, {restaurant_id:1,name:1,address:1,borough:1,cuisine:1,_id:0} );
db.restaurants.find( {address: {zipcode: 1}}, {restaurant_id:1,name:1,borough:1,cuisine:1,_id:0} );
db.restaurants.find( {borough: { $eq: 'Bronx' }},{});
db.restaurants.find( {borough: { $eq: 'Bronx' }}, {}).limit(5).pretty();
db.restaurants.find( {borough: { $eq: 'Bronx' }}, {}).skip().limit(5).pretty();
db.restaurants.find( {grades: { $elemMatch: { score: { $gt: 90  }}}}, { name: 1, _id: 0 } ); 
db.restaurants.find( {grades: { $elemMatch: { score: { $gt: 80, $lt: 100 } } } }, { name: 1, _id: 0}  ); 
db.restaurants.find( {'address.coord.0': { $lt: -95.754168 } } , { 'name': 1, '_id': 0 } );
db.restaurants.find( {'cuisine': {$ne: 'American '},'address.coord.1': {$lt: 65.754168, }, 'grades.score': { $lt: 70 } }, {'name': 1, '_id': 0,} );
db.restaurants.find( {'cuisine': {$ne: 'American '}, 'grades.score':{ $lt: 70}, 'address.coord.0': {$lt: -65.754168} }, {'name': 1, '_id': 0} );
db.restaurants.find( {'cuisine': {$ne: 'American '}, 'grades.grade': {$eq: 'A'}, 'borough': {$ne: 'Brooklyn'}}, {'cuisine': 1, 'name': 1, '_id': 0} ).sort({'cuisine': -1});
db.restaurants.find( {'name':/^Wil/}, {'restaurant_id': 1, 'name': 1, 'borough': 1, 'cuisine': 1, '_id': 0} );
db.restaurants.find( {'name':/ces$/}, {'restaurant_id': 1, 'name': 1, 'borough': 1, 'cuisine': 1, '_id': 0} );
db.restaurants.find( {'name':/Reg/}, {'restaurant_id': 1, 'name': 1, 'borough': 1, 'cuisine': 1, '_id': 0} );
db.restaurants.find( {'borough': {$eq: 'Bronx'}, 'cuisine': {$eq: 'American '}, 'cuisine': {$eq: 'Chinese'} }, {'cuisine': 1,'name': 1, '_id': 0} );
db.restaurants.find( {'borough': {$in: ['Staten Island','Queens','Bronx','Brooklyn']}}, {'_id':0, 'restaurant_id':1, 'borough':1, 'cuisine':1} );
db.restaurants.find( {'borough': {$nin: ['Staten Island','Queens','Bronx','Brooklyn']}}, {'_id':0, 'restaurant_id':1, 'borough':1, 'cuisine':1} );
db.restaurants.find( {'grades.score': {$eq : 10}}, {'restaurant_id': 1, 'name': 1, 'borough': 1, 'cuisine': 1, 'grades.score': 1} ).pretty();
db.restaurants.find( {$or: [ {'cuisine': {$eq: 'Seafood', $ne: 'American ', $ne: 'Chinese'} }, {'name':/^Wil/} ]}, {'restaurant_id': 1, 'borough': 1, 'cuisine': 1, 'name': 1});
db.restaurants.find( {'grades': {$elemMatch: {'grade': {$eq:'A'}, 'score': {$eq:11}, 'date': {$eq:ISODate('2014-08-11T00:00:00Z')}} }}, {'restaurant_id': 1, 'name': 1, 'grades': 1});
db.restaurants.find( {'grades.1': {$elemMatch: {'grade': {$eq:'A'}, 'score': {$eq:9}, 'date': {$eq:ISODate('2014-08-11T00:00:00Z')}} }}, {'restaurant_id': 1, 'name': 1, 'grades': 1});
db.restaurants.find( {'address.coord.1': {$gt: 42, $lt: 52}}, {'restaurant_id': 1, 'name': 1, 'address': 1,} );
db.restaurants.find( {}, {'name': 1, 'address': 1, 'borough': 1}).sort({'name': 1}, {'address': 1}, {'borough': 1});
db.restaurants.find( {}, {'name': 1, 'address': 1, 'borough': 1}).sort({'name': -1}, {'address': -1}, {'borough': -1});
db.restaurants.find( {}, {'cuisine': 1, 'borough': 1}).sort({'cuisine': 1}, {'borough': -1});
db.restaurants.find( {'address.street': {$exists: false}}, {'name': 1, 'address.street': 1});
db.restaurants.find( {'address.coord': {$type: 'double'}}, {'name': 1,} );
db.restaurants.aggregate();
db.restaurants.find( {'name':/mon/}, {'name': 1, 'borough': 1, 'address.coord': 1, 'cuisine': 1});
db.restaurants.find( {'name':/^Mad/}, {'name': 1, 'borough': 1, 'address.coord': 1, 'cuisine': 1});


db.restaurant.find({})

db.restaurant.find( {}, {_id:0, restaurant_id:1, name:1, borough:1, cuisine:1} )
db.restaurant.find( {}, {restaurant_id:1, name:1, borough:1, 'address.zipcode':1} )
db.restaurant.find( {borough:"Bronx"} )
db.restaurant.find( {borough:"Bronx"} ).limit(5)
db.restaurant.find( {borough:"Bronx"} ).skip(5).limit(5)
db.restaurant.find( {'grades.score': {$gt:90}} )
db.restaurant.find( {'grades.score': {$gt:80,$lt:100}} )
db.restaurant.find( {'address.coord.0': {$lt: -95.754168}} ) 
db.restaurant.find({cuisine: {$ne: 'American '}, 'grades.score': {$gt:70}, 'address.coord.0': {$lt:-65.754168}})
db.restaurant.find({cuisine: {$ne: 'American '}, 'grades.grade': 'A', borough: {$ne: 'Brooklyn'}} ).sort( { cuisine: -1 })
db.restaurant.find({name: {$regex: 'Wil'}}, {restaurant_id:1,name:1, borough:1, cuisine:1})
db.restaurant.find({name: {$regex: 'ces$'}}, {restaurant_id:1,name:1, borough:1, cuisine:1})//chequear
db.restaurant.find({name: {$regex: 'Reg', $options:'$i'}}, {restaurant_id:1,name:1, borough:1, cuisine:1})//chequear
db.restaurant.find({$and: [{borough:'Bronx'}, {$or: [{cuisine: 'American '}, {cuisine: 'Chinese'}]}]}, {restaurant_id:1,name:1, borough:1, cuisine:1})
db.restaurant.find({$or: [{borough:'Staten Island'}, {borough: 'Queens'}, {borough: 'Bonx'}]}, {restaurant_id:1,name:1, borough:1, cuisine:1})
db.restaurant.find({borough: {$nin: ['Staten Island', 'Queens', 'Bronx', 'Brooklyn']}}, {restaurant_id:1, name:1, borough:1, cuisine:1})
db.restaurant.find({'grades.score': {$not: {$gt: 10}}}, {restaurant_id:1, name:1, borough:1, cuisine:1})
db.restaurant.find({$or:[{$and:[{cuisine:'Seafood'}, {cuisine: {$nin: ['American ','Chinese']}}]}, {name:{$regex:'^Will'}}]}, {restaurant_id:1, name:1, borough:1, cuisine:1}) //no funciona filtro de 'Will'
db.restaurant.find({$and:[{'grades.grade':'A'}, {'grades.score': 11}, {'grades.date': ISODate ('2014-08-11T00:00:00Z')}]}, {restaurant_id:1, name:1, grades:1})
db.restaurant.find({$and: [{'grades.grade':'A'}, {'grades.score': 9}, {'grades.date': ISODate('2014-08-11T00:00:00Z')}]}, {restaurant_id:1, name:1, grades:1})
db.restaurant.find({'address.coord.1': {$gt:42,$lt:52}}, {restaurant_id:1, name:1, address:1})
db.restaurant.find({}).sort({name:1})
db.restaurant.find({}).sort({name:-1})
db.restaurant.aggregate([{$group:{ _id:{borough:"$borough"},cuisine: {$addToSet:'$cuisine'}}}]).sort({name:1, borough:-1})
db.restaurant.find({ 'address.street': { $exists: false } })
db.restaurant.find( { address: {$elemMatch:{ coord : { $type : "double" }}} } )
db.restaurant.find({ 'grades.score': { $mod: [ 7, 0 ] } }, {restaurant_id:1, name:1, 'grades.grade':1})
db.restaurant.find({name: {$regex : 'mon', $options:'i'}}, {name: 1, borough:1, 'address.coord': 1, cuisine:1})
db.restaurant.find({name: {$regex: '^Mad'}}, {name:1, borough:1, 'address.coord':1, cuisine:1})